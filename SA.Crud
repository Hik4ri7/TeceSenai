import mysql.connector

# Conectando ao banco de dados
def conectar_banco():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="root",
        database="sa_estoque"
    )


def cadastrar_usuario(nome, usuario, cpf, telefone, senha, tipo_usuario, cadastro_root):
    conn = mysql.connector.connect(host="localhost", user="root", password="root", database="sa_estoque")
    cursor = conn.cursor()

    cursor.execute("INSERT INTO tb_usuarios (nome, usuario, cpf, nm_telefone, senha, tipo) VALUES (%s, %s, %s, %s, %s, %s)",
                   (nome, usuario, cpf, telefone, senha, tipo_usuario))

    conn.commit()
    conn.close()

def carregar_produtos():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("SELECT id_produto, nome, cor, preco, quantidade, id_categoria FROM tb_produtos")
    produtos = cursor.fetchall()
    conn.close()
    return produtos

def obter_categorias():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("SELECT nome_categoria FROM tb_categorias")
    categorias = [categoria[0] for categoria in cursor.fetchall()]
    conn.close()
    return categorias

def get_next_id():
    conn = conectar_banco()
    cursor = conn.cursor()
    
    cursor.execute("SELECT id_produto FROM tb_produtos ORDER BY id_produto")
    ids = cursor.fetchall()
    
    # Encontrar o primeiro ID ausente
    missing_id = 1
    for id in ids:
        if id[0] != missing_id:
            break
        missing_id += 1
    
    conn.close()
    return missing_id

def adicionar_produto(nome, cor, preco, quantidade, categoria_nome):
    conn = conectar_banco()
    cursor = conn.cursor()
    
    # Gerar o próximo id_produto disponível
    id_produto = get_next_id()

    try:
        # Remover espaços extras e converter para minúsculas para evitar problemas de correspondência
        categoria_nome = categoria_nome.strip().lower()

        # Obter o id_categoria a partir do nome da categoria
        cursor.execute("SELECT id_categoria FROM tb_categorias WHERE LOWER(nome_categoria) = %s", (categoria_nome,))
        resultado = cursor.fetchone()

        if resultado is None:
            raise ValueError(f"Categoria '{categoria_nome}' não encontrada!")

        id_categoria = resultado[0]  # Pega o ID da categoria

        # Inserir o produto na tabela tb_produtos
        cursor.execute(
            "INSERT INTO tb_produtos (id_produto, nome, cor, preco, quantidade, id_categoria) "
            "VALUES (%s, %s, %s, %s, %s, %s)",
            (id_produto, nome, cor, preco, quantidade, id_categoria)
        )
        conn.commit()
    except mysql.connector.Error as err:
        print(f"Erro ao adicionar produto: {err}")
        conn.rollback()
    except ValueError as ve:
        print(ve)
        conn.rollback()
    finally:
        conn.close()
        
def alterar_produto(produto_id, nome, cor, preco, quantidade):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE tb_produtos SET nome = %s, cor = %s, preco = %s, quantidade = %s WHERE id_produto = %s",
        (nome, cor, preco, quantidade, produto_id)
    )
    conn.commit()
    conn.close()

def excluir_produto(produto_id):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tb_produtos WHERE id_produto = %s", (produto_id,))
    conn.commit()
    conn.close()

def atualizar_quantidade(produto_id, nova_quantidade):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("UPDATE tb_produtos SET quantidade = %s WHERE id_produto = %s", (nova_quantidade, produto_id))
    conn.commit()
    conn.close()
    
def carregar_solicitacoes():
    conn = conectar_banco()
    cursor = conn.cursor()
    query = """
    SELECT 
        s.id_solicitacao,
        u.nome,
        s.tipo_tecido,
        s.quantidade,
        s.data_solicitacao,
        s.status,
        s.observacao
    FROM tb_solicitacao s
    JOIN tb_usuarios u ON s.id_usuario = u.id_usuario;
    """
    cursor.execute(query)
    solicitacoes = cursor.fetchall()
    conn.close()
    return solicitacoes

def adicionar_solicitacao(id_usuario_logado, tipo_tecido, quantidade):
    conn = conectar_banco()
    cursor = conn.cursor()
    query = "INSERT INTO tb_solicitacao (id_usuario, tipo_tecido, quantidade) VALUES (%s, %s, %s)"
    cursor.execute(query, (id_usuario_logado, tipo_tecido, quantidade))
    conn.commit()
    conn.close()

def aprovar_solicitacao(id_solicitacao):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("UPDATE tb_solicitacao SET status='aprovado' WHERE id_solicitacao=%s", (id_solicitacao,))
    conn.commit()
    conn.close()

def rejeitar_solicitacao(id_solicitacao):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute("UPDATE tb_solicitacao SET status='rejeitado' WHERE id_solicitacao=%s", (id_solicitacao,))
    conn.commit()
    conn.close()

def adicionar_observacao(id_solicitacao, observacao):
    conn = conectar_banco()
    cursor = conn.cursor()
    query = "UPDATE tb_solicitacao SET observacao = %s WHERE id_solicitacao = %s"
    cursor.execute(query, (observacao, id_solicitacao))
    conn.commit()
    conn.close()
